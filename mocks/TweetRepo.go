// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gopherql "github.com/shohinsan/GopherQL"
	mock "github.com/stretchr/testify/mock"
)

// TweetRepo is an autogenerated mock type for the TweetRepo type
type TweetRepo struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *TweetRepo) All(ctx context.Context) ([]gopherql.Tweet, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []gopherql.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopherql.Tweet, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopherql.Tweet); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopherql.Tweet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, tweet
func (_m *TweetRepo) Create(ctx context.Context, tweet gopherql.Tweet) (gopherql.Tweet, error) {
	ret := _m.Called(ctx, tweet)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 gopherql.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gopherql.Tweet) (gopherql.Tweet, error)); ok {
		return rf(ctx, tweet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gopherql.Tweet) gopherql.Tweet); ok {
		r0 = rf(ctx, tweet)
	} else {
		r0 = ret.Get(0).(gopherql.Tweet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, gopherql.Tweet) error); ok {
		r1 = rf(ctx, tweet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TweetRepo) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TweetRepo) GetByID(ctx context.Context, id string) (gopherql.Tweet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 gopherql.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopherql.Tweet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopherql.Tweet); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopherql.Tweet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParentID provides a mock function with given fields: ctx, id
func (_m *TweetRepo) GetByParentID(ctx context.Context, id string) ([]gopherql.Tweet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByParentID")
	}

	var r0 []gopherql.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]gopherql.Tweet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []gopherql.Tweet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopherql.Tweet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTweetRepo creates a new instance of TweetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTweetRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TweetRepo {
	mock := &TweetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
